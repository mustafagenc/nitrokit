generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PhoneVerification {
  id          String   @id @default(cuid())
  userId      String
  phoneNumber String
  code        String
  expiresAt   DateTime
  verified    Boolean  @default(false)
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("phone_verifications")
}

enum NotificationType {
  PROFILE_UPDATED
  PASSWORD_CHANGED
  PHONE_VERIFIED
  AVATAR_UPDATED
  AVATAR_REMOVED
  SUPPORT_MESSAGE
  INVOICE_CREATED
  INVOICE_PAID
  SYSTEM_ALERT
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? // Credentials authentication i√ßin
  role          Role      @default(User)
  isActive      Boolean   @default(true)

  // Relations
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]
  notifications  Notification[]

  // Profile fields
  firstName String?
  lastName  String?
  username  String?
  
  phone              String?
  phoneVerified      Boolean @default(false)
  phoneVerifiedAt    DateTime?
  phoneVerifications PhoneVerification[]

  // Security fields
  lastLoginAt DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notificationPreferences NotificationPreferences?

  // 2FA fields
  twoFactorEnabled    Boolean   @default(false) @map("two_factor_enabled")
  twoFactorSecret     String?   @map("two_factor_secret")
  twoFactorBackupCodes String[] @map("two_factor_backup_codes")
  twoFactorVerifiedAt DateTime? @map("two_factor_verified_at")

  // Preferences
  locale    String  @default("en")
  theme     String  @default("system") // light, dark, system

  refreshTokens RefreshToken[]

  @@map("users")
}

enum Role {
  User
  Admin
  Moderator
}

model NotificationPreferences {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Email notifications
  emailAccountSecurity Boolean @default(true) @map("email_account_security")
  emailLoginAlerts     Boolean @default(true) @map("email_login_alerts")
  emailPasswordChanges Boolean @default(true) @map("email_password_changes")
  emailProfileUpdates  Boolean @default(true) @map("email_profile_updates")
  emailMarketing       Boolean @default(false) @map("email_marketing")
  emailNewsletters     Boolean @default(false) @map("email_newsletters")
  
  // SMS notifications
  smsAccountSecurity Boolean @default(true) @map("sms_account_security")
  smsLoginAlerts     Boolean @default(true) @map("sms_login_alerts")
  smsPasswordChanges Boolean @default(false) @map("sms_password_changes")
  smsProfileUpdates  Boolean @default(false) @map("sms_profile_updates")
  smsMarketing       Boolean @default(false) @map("sms_marketing")
  
  // In-app notifications
  appAccountSecurity Boolean @default(true) @map("app_account_security")
  appLoginAlerts     Boolean @default(true) @map("app_login_alerts")
  appPasswordChanges Boolean @default(true) @map("app_password_changes")
  appProfileUpdates  Boolean @default(true) @map("app_profile_updates")
  appSystemUpdates   Boolean @default(true) @map("app_system_updates")
  appMarketing       Boolean @default(false) @map("app_marketing")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("notification_preferences")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  deviceType   String?  @map("device_type")
  browser      String?
  os           String?
  location     String?
  lastActive   DateTime @default(now()) @map("last_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id         String    @id @default(cuid())
  identifier String
  token      String    @unique
  expires    DateTime
  type       TokenType @default(EMAIL_VERIFICATION)

  createdAt DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, credentialID])
  @@map("authenticators")
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  MAGIC_LINK

  @@map("token_types")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model RefreshToken {
    id        String   @id @default(cuid())
    token     String   @unique
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    expires   DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}
