<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="197" failures="0" errors="0" time="4.764587468">
    <testsuite name="src/lib/__tests__/utils/error-handler.test.ts" timestamp="2025-06-12T01:36:08.067Z" hostname="MacBookPro.Workgroup" tests="41" failures="0" errors="0" skipped="0" time="0.51187845">
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; normalizeError &gt; should return Error instance unchanged" time="0.003442038">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; normalizeError &gt; should convert string to Error instance" time="0.000950453">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; normalizeError &gt; should convert object with message property to Error" time="0.000782203">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; normalizeError &gt; should handle object with non-string message" time="0.000642059">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; normalizeError &gt; should handle object with null message" time="0.00116453">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; normalizeError &gt; should handle object with undefined message" time="0.000560228">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; normalizeError &gt; should return default error for null" time="0.000678561">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; normalizeError &gt; should return default error for undefined" time="0.000480465">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; normalizeError &gt; should return default error for number" time="0.000549011">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; normalizeError &gt; should return default error for boolean" time="0.001093131">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; normalizeError &gt; should return default error for array" time="0.000910653">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; normalizeError &gt; should return default error for function" time="0.000349126">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; normalizeError &gt; should handle object without message property" time="0.000365104">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; normalizeError &gt; should handle empty string" time="0.001618204">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; normalizeError &gt; should handle empty object" time="0.000475762">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; getErrorMessage &gt; should return message from Error instance" time="0.000546009">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; getErrorMessage &gt; should return string error directly" time="0.000331928">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; getErrorMessage &gt; should return message from object with message property" time="0.000437911">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; getErrorMessage &gt; should return default message for unknown error types" time="0.000271317">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; getErrorMessage &gt; should handle null input" time="0.000374064">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; getErrorMessage &gt; should handle undefined input" time="0.00037798">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; getErrorMessage &gt; should handle empty string" time="0.000294885">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; getErrorMessage &gt; should handle complex object with message" time="0.000311043">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; getErrorStack &gt; should return stack from Error instance" time="0.012297684">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; getErrorStack &gt; should return undefined for string error (no stack)" time="0.001482917">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; getErrorStack &gt; should return stack for object converted to Error" time="0.000859249">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; getErrorStack &gt; should handle null input" time="0.000643743">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; getErrorStack &gt; should handle undefined input" time="0.001594345">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; getErrorStack &gt; should preserve original stack trace when possible" time="0.000639319">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; Edge cases and integration &gt; should handle Error subclasses correctly" time="0.000829222">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; Edge cases and integration &gt; should handle TypeError" time="0.000361972">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; Edge cases and integration &gt; should handle RangeError" time="0.000478231">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; Edge cases and integration &gt; should handle nested error objects" time="0.000358588">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; Edge cases and integration &gt; should handle circular references safely" time="0.001858887">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; Edge cases and integration &gt; should handle very long error messages" time="0.000488167">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; Edge cases and integration &gt; should handle unicode characters in error messages" time="0.000256709">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; Edge cases and integration &gt; should handle error-like objects from different contexts" time="0.000320282">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; Performance considerations &gt; should handle many error normalizations efficiently" time="0.277459939">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; Performance considerations &gt; should not leak memory with repeated calls" time="0.187821662">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; Type guard behavior &gt; should work as type guard for Error instances" time="0.000647201">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/error-handler.test.ts" name="Error Handler Utils &gt; Type guard behavior &gt; should ensure consistent return type" time="0.001396778">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/accordion.test.tsx" timestamp="2025-06-12T01:36:08.076Z" hostname="MacBookPro.Workgroup" tests="5" failures="0" errors="0" skipped="0" time="0.489923516">
        <testcase classname="src/components/ui/__tests__/accordion.test.tsx" name="Accordion &gt; renders accordion items" time="0.202100374">
        </testcase>
        <testcase classname="src/components/ui/__tests__/accordion.test.tsx" name="Accordion &gt; expands and collapses accordion items" time="0.122901582">
        </testcase>
        <testcase classname="src/components/ui/__tests__/accordion.test.tsx" name="Accordion &gt; handles multiple accordion items" time="0.119076472">
        </testcase>
        <testcase classname="src/components/ui/__tests__/accordion.test.tsx" name="Accordion &gt; applies custom className to accordion item" time="0.019939514">
        </testcase>
        <testcase classname="src/components/ui/__tests__/accordion.test.tsx" name="Accordion &gt; handles disabled accordion item" time="0.022416627">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/navigation-menu.test.tsx" timestamp="2025-06-12T01:36:08.077Z" hostname="MacBookPro.Workgroup" tests="3" failures="0" errors="0" skipped="0" time="0.380405693">
        <testcase classname="src/components/ui/__tests__/navigation-menu.test.tsx" name="NavigationMenu &gt; renders navigation menu with items" time="0.197220045">
        </testcase>
        <testcase classname="src/components/ui/__tests__/navigation-menu.test.tsx" name="NavigationMenu &gt; renders navigation menu with trigger and content" time="0.159258029">
        </testcase>
        <testcase classname="src/components/ui/__tests__/navigation-menu.test.tsx" name="NavigationMenu &gt; applies custom className to navigation menu link" time="0.020245356">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/button.test.tsx" timestamp="2025-06-12T01:36:08.078Z" hostname="MacBookPro.Workgroup" tests="7" failures="0" errors="0" skipped="0" time="0.28904185">
        <testcase classname="src/components/ui/__tests__/button.test.tsx" name="Button &gt; renders button with default props" time="0.124708091">
        </testcase>
        <testcase classname="src/components/ui/__tests__/button.test.tsx" name="Button &gt; renders button with different variants" time="0.041461538">
        </testcase>
        <testcase classname="src/components/ui/__tests__/button.test.tsx" name="Button &gt; renders button with different sizes" time="0.03450582">
        </testcase>
        <testcase classname="src/components/ui/__tests__/button.test.tsx" name="Button &gt; applies custom className" time="0.006017321">
        </testcase>
        <testcase classname="src/components/ui/__tests__/button.test.tsx" name="Button &gt; handles disabled state" time="0.01075789">
        </testcase>
        <testcase classname="src/components/ui/__tests__/button.test.tsx" name="Button &gt; handles click events" time="0.049115502">
        </testcase>
        <testcase classname="src/components/ui/__tests__/button.test.tsx" name="Button &gt; handles asChild prop" time="0.020119473">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/switch.test.tsx" timestamp="2025-06-12T01:36:08.080Z" hostname="MacBookPro.Workgroup" tests="6" failures="0" errors="0" skipped="0" time="0.293262329">
        <testcase classname="src/components/ui/__tests__/switch.test.tsx" name="Switch &gt; renders switch" time="0.140207065">
        </testcase>
        <testcase classname="src/components/ui/__tests__/switch.test.tsx" name="Switch &gt; handles checked state" time="0.057848301">
        </testcase>
        <testcase classname="src/components/ui/__tests__/switch.test.tsx" name="Switch &gt; handles disabled state" time="0.019716725">
        </testcase>
        <testcase classname="src/components/ui/__tests__/switch.test.tsx" name="Switch &gt; applies custom className" time="0.022316758">
        </testcase>
        <testcase classname="src/components/ui/__tests__/switch.test.tsx" name="Switch &gt; handles onChange event" time="0.036266529">
        </testcase>
        <testcase classname="src/components/ui/__tests__/switch.test.tsx" name="Switch &gt; handles default checked state" time="0.014477962">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/checkbox.test.tsx" timestamp="2025-06-12T01:36:08.081Z" hostname="MacBookPro.Workgroup" tests="5" failures="0" errors="0" skipped="0" time="0.327332826">
        <testcase classname="src/components/ui/__tests__/checkbox.test.tsx" name="Checkbox &gt; renders checkbox" time="0.189354403">
        </testcase>
        <testcase classname="src/components/ui/__tests__/checkbox.test.tsx" name="Checkbox &gt; handles checked state" time="0.064533311">
        </testcase>
        <testcase classname="src/components/ui/__tests__/checkbox.test.tsx" name="Checkbox &gt; handles disabled state" time="0.018556241">
        </testcase>
        <testcase classname="src/components/ui/__tests__/checkbox.test.tsx" name="Checkbox &gt; applies custom className" time="0.016969603">
        </testcase>
        <testcase classname="src/components/ui/__tests__/checkbox.test.tsx" name="Checkbox &gt; handles onChange event" time="0.03501737">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/scroll-area.test.tsx" timestamp="2025-06-12T01:36:08.082Z" hostname="MacBookPro.Workgroup" tests="4" failures="0" errors="0" skipped="0" time="0.368422815">
        <testcase classname="src/components/ui/__tests__/scroll-area.test.tsx" name="ScrollArea &gt; renders scroll area" time="0.129723266">
        </testcase>
        <testcase classname="src/components/ui/__tests__/scroll-area.test.tsx" name="ScrollArea &gt; applies custom className" time="0.022662769">
        </testcase>
        <testcase classname="src/components/ui/__tests__/scroll-area.test.tsx" name="ScrollArea &gt; renders scroll area with different orientations" time="0.021633165">
        </testcase>
        <testcase classname="src/components/ui/__tests__/scroll-area.test.tsx" name="ScrollArea &gt; renders scroll area with different types" time="0.191169883">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/textarea.test.tsx" timestamp="2025-06-12T01:36:08.083Z" hostname="MacBookPro.Workgroup" tests="3" failures="0" errors="0" skipped="0" time="0.256196074">
        <testcase classname="src/components/ui/__tests__/textarea.test.tsx" name="Textarea &gt; renders textarea" time="0.106329291">
        </testcase>
        <testcase classname="src/components/ui/__tests__/textarea.test.tsx" name="Textarea &gt; applies custom className" time="0.123770905">
        </testcase>
        <testcase classname="src/components/ui/__tests__/textarea.test.tsx" name="Textarea &gt; handles disabled prop" time="0.017880557">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/select.test.tsx" timestamp="2025-06-12T01:36:08.085Z" hostname="MacBookPro.Workgroup" tests="3" failures="0" errors="0" skipped="0" time="0.385647481">
        <testcase classname="src/components/ui/__tests__/select.test.tsx" name="Select &gt; renders select" time="0.332063035">
        </testcase>
        <testcase classname="src/components/ui/__tests__/select.test.tsx" name="Select &gt; applies custom className" time="0.021928192">
        </testcase>
        <testcase classname="src/components/ui/__tests__/select.test.tsx" name="Select &gt; handles disabled state" time="0.028792068">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/pagination.test.tsx" timestamp="2025-06-12T01:36:08.086Z" hostname="MacBookPro.Workgroup" tests="4" failures="0" errors="0" skipped="0" time="0.227494927">
        <testcase classname="src/components/ui/__tests__/pagination.test.tsx" name="Pagination &gt; renders pagination component" time="0.140351756">
        </testcase>
        <testcase classname="src/components/ui/__tests__/pagination.test.tsx" name="Pagination &gt; applies active state to current page" time="0.00641021">
        </testcase>
        <testcase classname="src/components/ui/__tests__/pagination.test.tsx" name="Pagination &gt; handles click events on pagination links" time="0.067442781">
        </testcase>
        <testcase classname="src/components/ui/__tests__/pagination.test.tsx" name="Pagination &gt; renders ellipsis with correct accessibility attributes" time="0.010019039">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/breadcrumb.test.tsx" timestamp="2025-06-12T01:36:08.087Z" hostname="MacBookPro.Workgroup" tests="4" failures="0" errors="0" skipped="0" time="0.225413282">
        <testcase classname="src/components/ui/__tests__/breadcrumb.test.tsx" name="Breadcrumb &gt; renders breadcrumb with items" time="0.176646566">
        </testcase>
        <testcase classname="src/components/ui/__tests__/breadcrumb.test.tsx" name="Breadcrumb &gt; renders breadcrumb links with correct hrefs" time="0.026418303">
        </testcase>
        <testcase classname="src/components/ui/__tests__/breadcrumb.test.tsx" name="Breadcrumb &gt; applies custom className to breadcrumb list" time="0.012310554">
        </testcase>
        <testcase classname="src/components/ui/__tests__/breadcrumb.test.tsx" name="Breadcrumb &gt; renders breadcrumb with custom separator" time="0.007654835">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/input.test.tsx" timestamp="2025-06-12T01:36:08.088Z" hostname="MacBookPro.Workgroup" tests="3" failures="0" errors="0" skipped="0" time="0.222865146">
        <testcase classname="src/components/ui/__tests__/input.test.tsx" name="Input &gt; renders input" time="0.091349778">
        </testcase>
        <testcase classname="src/components/ui/__tests__/input.test.tsx" name="Input &gt; applies custom className" time="0.093045794">
        </testcase>
        <testcase classname="src/components/ui/__tests__/input.test.tsx" name="Input &gt; handles disabled prop" time="0.024709538">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/card.test.tsx" timestamp="2025-06-12T01:36:08.089Z" hostname="MacBookPro.Workgroup" tests="3" failures="0" errors="0" skipped="0" time="0.095000034">
        <testcase classname="src/components/ui/__tests__/card.test.tsx" name="Card &gt; renders card with all subcomponents" time="0.075894513">
        </testcase>
        <testcase classname="src/components/ui/__tests__/card.test.tsx" name="Card &gt; applies custom className to card" time="0.008625497">
        </testcase>
        <testcase classname="src/components/ui/__tests__/card.test.tsx" name="Card &gt; renders card with only required components" time="0.00783655">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/avatar.test.tsx" timestamp="2025-06-12T01:36:08.089Z" hostname="MacBookPro.Workgroup" tests="2" failures="0" errors="0" skipped="0" time="0.142851601">
        <testcase classname="src/components/ui/__tests__/avatar.test.tsx" name="Avatar &gt; Avatar bileşeni ve fallback render ediliyor" time="0.128194328">
        </testcase>
        <testcase classname="src/components/ui/__tests__/avatar.test.tsx" name="Avatar &gt; AvatarFallback içeriği doğru gösteriliyor" time="0.011553656">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/alert.test.tsx" timestamp="2025-06-12T01:36:08.090Z" hostname="MacBookPro.Workgroup" tests="3" failures="0" errors="0" skipped="0" time="0.151481522">
        <testcase classname="src/components/ui/__tests__/alert.test.tsx" name="Alert &gt; renders alert with different variants" time="0.134881412">
        </testcase>
        <testcase classname="src/components/ui/__tests__/alert.test.tsx" name="Alert &gt; renders alert with different text content" time="0.006140734">
        </testcase>
        <testcase classname="src/components/ui/__tests__/alert.test.tsx" name="Alert &gt; applies custom className" time="0.007070453">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/label.test.tsx" timestamp="2025-06-12T01:36:08.091Z" hostname="MacBookPro.Workgroup" tests="2" failures="0" errors="0" skipped="0" time="0.084703873">
        <testcase classname="src/components/ui/__tests__/label.test.tsx" name="Label &gt; renders label" time="0.062229496">
        </testcase>
        <testcase classname="src/components/ui/__tests__/label.test.tsx" name="Label &gt; applies custom className" time="0.019832673">
        </testcase>
    </testsuite>
    <testsuite name="src/components/ui/__tests__/skeleton.test.tsx" timestamp="2025-06-12T01:36:08.092Z" hostname="MacBookPro.Workgroup" tests="2" failures="0" errors="0" skipped="0" time="0.069132434">
        <testcase classname="src/components/ui/__tests__/skeleton.test.tsx" name="Skeleton &gt; renders skeleton" time="0.05958544">
        </testcase>
        <testcase classname="src/components/ui/__tests__/skeleton.test.tsx" name="Skeleton &gt; applies custom className" time="0.006755226">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/__tests__/security/csrf.test.ts" timestamp="2025-06-12T01:36:08.093Z" hostname="MacBookPro.Workgroup" tests="17" failures="0" errors="0" skipped="0" time="0.080147281">
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; generateCSRFToken &gt; should generate a valid CSRF token" time="0.029613452">
        </testcase>
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; generateCSRFToken &gt; should generate token with user ID" time="0.002017408">
        </testcase>
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; verifyCSRFToken &gt; should verify valid token" time="0.00116158">
        </testcase>
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; verifyCSRFToken &gt; should reject non-existent token" time="0.000841695">
        </testcase>
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; verifyCSRFToken &gt; should reject expired token" time="0.003400556">
        </testcase>
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; verifyCSRFToken &gt; should verify token with matching user ID" time="0.002593358">
        </testcase>
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; verifyCSRFToken &gt; should reject token with mismatched user ID" time="0.001061413">
        </testcase>
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; csrfProtection middleware &gt; should allow safe methods and generate new token" time="0.011462363">
        </testcase>
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; csrfProtection middleware &gt; should reject unsafe method without token" time="0.002235536">
        </testcase>
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; csrfProtection middleware &gt; should accept valid token in header" time="0.001796054">
        </testcase>
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; csrfProtection middleware &gt; should accept valid token in cookie" time="0.001256826">
        </testcase>
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; addCSRFTokenToResponse &gt; should add token to response headers and cookies" time="0.009394492">
        </testcase>
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; Double Submit Cookie Pattern &gt; should generate token and signature" time="0.001257086">
        </testcase>
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; Double Submit Cookie Pattern &gt; should verify valid token and signature" time="0.001816153">
        </testcase>
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; Double Submit Cookie Pattern &gt; should reject invalid signature" time="0.001340176">
        </testcase>
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; Origin Validation &gt; should validate allowed origin" time="0.001325221">
        </testcase>
        <testcase classname="src/lib/__tests__/security/csrf.test.ts" name="CSRF Security Module &gt; Origin Validation &gt; should reject disallowed origin" time="0.001555872">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/__tests__/utils/cn.test.ts" timestamp="2025-06-12T01:36:08.098Z" hostname="MacBookPro.Workgroup" tests="23" failures="0" errors="0" skipped="0" time="0.063128702">
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Basic functionality &gt; should merge single class string" time="0.01534491">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Basic functionality &gt; should merge multiple class strings" time="0.001064478">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Basic functionality &gt; should handle empty inputs" time="0.001160564">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Basic functionality &gt; should handle undefined and null values" time="0.000854573">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Conditional classes &gt; should handle boolean conditions" time="0.001121586">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Conditional classes &gt; should handle object notation" time="0.001048445">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Conditional classes &gt; should handle mixed input types" time="0.001372082">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Tailwind CSS class merging &gt; should merge conflicting Tailwind classes correctly" time="0.000824129">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Tailwind CSS class merging &gt; should handle responsive variants" time="0.001722937">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Tailwind CSS class merging &gt; should handle state variants" time="0.000886765">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Tailwind CSS class merging &gt; should merge complex conflicting classes" time="0.000594505">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Edge cases &gt; should handle very long class strings" time="0.000926388">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Edge cases &gt; should handle special characters in class names" time="0.000755367">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Edge cases &gt; should handle custom class names mixed with Tailwind" time="0.000707898">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Edge cases &gt; should deduplicate identical classes" time="0.000585946">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Edge cases &gt; should handle whitespace normalization" time="0.00046587">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Real-world usage scenarios &gt; should handle button variant combinations" time="0.000365502">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Real-world usage scenarios &gt; should handle component size variations" time="0.000363169">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Real-world usage scenarios &gt; should handle conditional disabled state" time="0.000269826">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Real-world usage scenarios &gt; should handle form input states" time="0.000340392">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Performance considerations &gt; should handle many class combinations efficiently" time="0.015904141">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Performance considerations &gt; should return consistent results for same inputs" time="0.000342404">
        </testcase>
        <testcase classname="src/lib/__tests__/utils/cn.test.ts" name="cn utility function &gt; Type safety &gt; should accept various ClassValue types" time="0.006663702">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/__tests__/security/validation.test.ts" timestamp="2025-06-12T01:36:08.103Z" hostname="MacBookPro.Workgroup" tests="25" failures="0" errors="0" skipped="0" time="0.027077355">
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; emailSchema geçerli email formatını kabul eder" time="0.003485881">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; emailSchema geçersiz email formatını reddeder" time="0.001029615">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; passwordSchema geçerli şifreyi kabul eder" time="0.000679315">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; passwordSchema geçersiz şifreyi reddeder" time="0.000918283">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; nameSchema geçerli ismi kabul eder" time="0.000422397">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; nameSchema geçersiz ismi reddeder" time="0.000374991">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; phoneSchema geçerli telefon numarasını kabul eder" time="0.000409254">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; phoneSchema geçersiz telefon numarasını reddeder" time="0.000414633">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; urlSchema geçerli URL formatını kabul eder" time="0.001052026">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; urlSchema geçersiz URL formatını reddeder" time="0.000813379">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; slugSchema geçerli slug formatını kabul eder" time="0.000390109">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; slugSchema geçersiz slug formatını reddeder" time="0.000463325">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; contactFormSchema geçerli form verisini kabul eder" time="0.003074054">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; contactFormSchema geçersiz form verisini reddeder" time="0.001978137">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; registerSchema geçerli kayıt verisini kabul eder" time="0.001162373">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; registerSchema geçersiz kayıt verisini reddeder" time="0.001038343">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; loginSchema geçerli giriş verisini kabul eder" time="0.000491993">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; loginSchema geçersiz giriş verisini reddeder" time="0.000358687">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; resetPasswordSchema geçerli şifre sıfırlama verisini kabul eder" time="0.000568615">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; resetPasswordSchema geçersiz şifre sıfırlama verisini reddeder" time="0.000497816">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; containsSuspiciousPatterns şüpheli metni tespit eder" time="0.000436958">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; isDisposableEmail geçici email adresini tespit eder" time="0.000526933">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; containsSpam spam metni tespit eder" time="0.000503645">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; validateRequest geçerli veriyi kabul eder" time="0.000698032">
        </testcase>
        <testcase classname="src/lib/__tests__/security/validation.test.ts" name="validation utils &gt; validateRequest geçersiz veriyi reddeder" time="0.001585247">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/__tests__/metadata/generators.test.ts" timestamp="2025-06-12T01:36:08.110Z" hostname="MacBookPro.Workgroup" tests="6" failures="0" errors="0" skipped="0" time="0.031832693">
        <testcase classname="src/lib/__tests__/metadata/generators.test.ts" name="Metadata Generators &gt; generateSiteMetadata &gt; should generate complete site metadata" time="0.007127255">
        </testcase>
        <testcase classname="src/lib/__tests__/metadata/generators.test.ts" name="Metadata Generators &gt; generateSiteMetadata &gt; should call all required dependencies" time="0.003600216">
        </testcase>
        <testcase classname="src/lib/__tests__/metadata/generators.test.ts" name="Metadata Generators &gt; generateSiteMetadata &gt; should handle different base URLs" time="0.002696642">
        </testcase>
        <testcase classname="src/lib/__tests__/metadata/generators.test.ts" name="Metadata Generators &gt; generateSiteMetadata &gt; should handle empty locales" time="0.002092723">
        </testcase>
        <testcase classname="src/lib/__tests__/metadata/generators.test.ts" name="Metadata Generators &gt; generatePageMetadata &gt; should generate page metadata with provided title and description" time="0.000886861">
        </testcase>
        <testcase classname="src/lib/__tests__/metadata/generators.test.ts" name="Metadata Generators &gt; generatePageMetadata &gt; should handle async params correctly" time="0.011501707">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/__tests__/security/encryption.test.ts" timestamp="2025-06-12T01:36:08.113Z" hostname="MacBookPro.Workgroup" tests="13" failures="0" errors="0" skipped="0" time="0.016565857">
        <testcase classname="src/lib/__tests__/security/encryption.test.ts" name="encryption utils &gt; generateEncryptionKey bir hex string döndürür" time="0.003348424">
        </testcase>
        <testcase classname="src/lib/__tests__/security/encryption.test.ts" name="encryption utils &gt; generateSecureToken doğru uzunlukta string döndürür" time="0.000743996">
        </testcase>
        <testcase classname="src/lib/__tests__/security/encryption.test.ts" name="encryption utils &gt; createHmacSignature string döndürür" time="0.001176928">
        </testcase>
        <testcase classname="src/lib/__tests__/security/encryption.test.ts" name="encryption utils &gt; maskSensitiveData doğru şekilde maskeleme yapar" time="0.000754467">
        </testcase>
        <testcase classname="src/lib/__tests__/security/encryption.test.ts" name="encryption utils &gt; maskEmail doğru şekilde maskeleme yapar" time="0.000702964">
        </testcase>
        <testcase classname="src/lib/__tests__/security/encryption.test.ts" name="encryption utils &gt; maskCreditCard doğru şekilde maskeleme yapar" time="0.000866621">
        </testcase>
        <testcase classname="src/lib/__tests__/security/encryption.test.ts" name="encryption utils &gt; maskPhoneNumber doğru şekilde maskeleme yapar" time="0.001505797">
        </testcase>
        <testcase classname="src/lib/__tests__/security/encryption.test.ts" name="encryption utils &gt; generateSalt doğru uzunlukta string döndürür" time="0.000490974">
        </testcase>
        <testcase classname="src/lib/__tests__/security/encryption.test.ts" name="encryption utils &gt; hashWithSalt hash ve salt döndürür" time="0.001206254">
        </testcase>
        <testcase classname="src/lib/__tests__/security/encryption.test.ts" name="encryption utils &gt; verifyHashWithSalt true döndürür" time="0.001106686">
        </testcase>
        <testcase classname="src/lib/__tests__/security/encryption.test.ts" name="encryption utils &gt; deriveKey 32 byte buffer döndürür" time="0.000813121">
        </testcase>
        <testcase classname="src/lib/__tests__/security/encryption.test.ts" name="encryption utils &gt; generateSecureRandomString hex döndürür" time="0.000620038">
        </testcase>
        <testcase classname="src/lib/__tests__/security/encryption.test.ts" name="encryption utils &gt; constantTimeEquals true döndürür" time="0.000468013">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/__tests__/security/sanitization.test.ts" timestamp="2025-06-12T01:36:08.116Z" hostname="MacBookPro.Workgroup" tests="9" failures="0" errors="0" skipped="0" time="0.01256021">
        <testcase classname="src/lib/__tests__/security/sanitization.test.ts" name="sanitization utils &gt; sanitizeHtml zararlı script etiketini temizler" time="0.003000977">
        </testcase>
        <testcase classname="src/lib/__tests__/security/sanitization.test.ts" name="sanitization utils &gt; stripAllTags tüm HTML etiketlerini kaldırır" time="0.000889521">
        </testcase>
        <testcase classname="src/lib/__tests__/security/sanitization.test.ts" name="sanitization utils &gt; sanitizeSqlInput SQL injection karakterlerini temizler" time="0.000789718">
        </testcase>
        <testcase classname="src/lib/__tests__/security/sanitization.test.ts" name="sanitization utils &gt; sanitizeUserInput temel temizlik yapar" time="0.001043226">
        </testcase>
        <testcase classname="src/lib/__tests__/security/sanitization.test.ts" name="sanitization utils &gt; sanitizeFileName geçersiz karakterleri temizler" time="0.000525097">
        </testcase>
        <testcase classname="src/lib/__tests__/security/sanitization.test.ts" name="sanitization utils &gt; sanitizeUrl geçerli bir URL döndürür" time="0.001693816">
        </testcase>
        <testcase classname="src/lib/__tests__/security/sanitization.test.ts" name="sanitization utils &gt; sanitizePhoneNumber sadece rakamları döndürür" time="0.0004636">
        </testcase>
        <testcase classname="src/lib/__tests__/security/sanitization.test.ts" name="sanitization utils &gt; sanitizeEmail küçük harfe çevirir ve boşlukları kırpar" time="0.000498653">
        </testcase>
        <testcase classname="src/lib/__tests__/security/sanitization.test.ts" name="sanitization utils &gt; sanitizeObject derin nesneleri temizler" time="0.001032118">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/__tests__/security/rate-limit.test.ts" timestamp="2025-06-12T01:36:08.119Z" hostname="MacBookPro.Workgroup" tests="4" failures="0" errors="0" skipped="0" time="0.012221517">
        <testcase classname="src/lib/__tests__/security/rate-limit.test.ts" name="rate-limit utils &gt; getRateLimitHeaders doğru header değerlerini döndürür" time="0.003400105">
        </testcase>
        <testcase classname="src/lib/__tests__/security/rate-limit.test.ts" name="rate-limit utils &gt; isRateLimited true döndürür" time="0.000641775">
        </testcase>
        <testcase classname="src/lib/__tests__/security/rate-limit.test.ts" name="rate-limit utils &gt; isRateLimited false döndürür" time="0.000833696">
        </testcase>
        <testcase classname="src/lib/__tests__/security/rate-limit.test.ts" name="rate-limit utils &gt; checkRateLimit fallback ile çalışır" time="0.004002493">
            <system-out>
Using fallback rate limit for key: test-key

            </system-out>
        </testcase>
    </testsuite>
</testsuites>
